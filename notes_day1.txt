Object Oriented Programming : 
_______________________________

it is an approach that provides a way of modularizing programming, that which can be used to create small partition memory area for both data and objects, which are to be used as templates for creating copies of such modules on demand. 

Object 

	An object is a real world entity, that which possess 3 characterstics 
		known as 

		(i) State

		(ii) Behaviour

		(iii) Identity 

OOPs features : 
_______________

	(i) Encapsulation : Wrapping up of data and functions into a single unit 				known as encapsulation.

	(ii) Abstraction : Hiding the irrelevant details of an object, that do not contribute to its essential characterstics known as abstraction. 

	*** Encapsulation focuses on showing the relevant details, where abstraction focuses on hiding the irrelevant details ***

	(iii) Inheritance : Deriving a new entity from already existing entity known as inheritanace, through inheritance we can reduce the size of the program. 

	(iv) Polymorphism : The ability to take more than one form known as polymorphism. 


class : A class is a template or blueprint, that which contains combination of data members and member functions.  Members of the class can be accessable by using instance of the class. 

class class_name
{
    data members;
    member functions;
}

Why Java : 
___________

	1) Platform Independence

	2) Console/Windows/Web/Service Oriented/Mobile Apps

	3) Packages : Contains group of related classes and interfaces that which belongs to one common group. If you want to overcome the naming conflicts between classes then we need the help of packages. 

Java Features : 
_______________

	(i) Simple : Java uses simple C/C++ syntaxes, as a programmer no needs to take care of internal details like memory management etc... As How much memory allocated to run the program, the same amount of memory will be reallocated automatically. 

	(ii) Object Oriented : Java supports all object oriented programming features. 

	(iii) Compiled and Interpreted : Java programs are compiled first, during compilation java code will be converted into bytecode, then (.class) file will be created. In interpretation, it reads the bytecode line by line and executes. 

	 (iv) Portable : Ability to run the program without changing the source code, java programs are programs that can run on any environment without changing the source code. 

	(v) Securable : Java implements various levels of security as 

			(a) Compiler Level

			(b) Bytecode Level

			(c) Class Loader Level

	(vi) Distributed : By using Java, we can implement all distributed and 				robust applications.


Java Architecture : 
____________________

	(i) Java Program

		Java code, that which stored with extension (.java)
	
	(ii) Java Class

		Java code after compilation, its converted into bytecode, then (.class) file will be created. 

	(iii) JVM (Java Virtual Machine)

		It contains various components as 

		(a) Class Loader : Used to load all classes that which are required to run the program.  There are 2 types of class loaders as

			(i) Primordial Class Loader : Used to load all predefined 
				classes. 

			(ii) Class Loader Objects : Used to load all user-defined
				classes. 

		(b) JIT Compiler : Used to convert bytecode into CPU Sepcific Format. 

		(c) Execution Manager : Contains queue of programs, which are ready to run, where we can execute the program. 

	 (iv) Java API : It provides runtime env, that which allows you to run the 			java program.  It contains JDK and JRE 

Data Types : 
_____________

There are various data types as 

	(i) Value Types

		int, float, double, char, boolean etc...

	(ii) Reference Types

		String, Object and Custom Types

System.out.println() : Used to display any value or message. 

System -> class

out -> Console

println() -> method. 

You can define method main() as

public static void main(String[] args) {
...
...
...
}

In java, we have 4 access modifiers as

1) private : Allows you to access members within current class. 

2) public : Allows you to access members in entire application. 

3) protected : Allows you to access members within current/derived classes. 

4) friendly : By default java possess friendly access modifier, allows you to access members within all classes of current package. 

You can create an object to the class, as

class_name obj = new class_name();

If you have class as Data then 

Data obj = new Data();












