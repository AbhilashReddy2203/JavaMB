

-> Java Introduction

-> Java Features

-> Java Architecture

-> Install Java software and Eclipse

-> Java Programs 

-> Control Structures 

_________________________________________________________________________

What is Object Oriented Programming : 

It is an approach that provides a way of modularizing programming, that which can be used to create small partition memory area for both data and objects, which are to be used as templates for creating copies of such modules on demand. 

Object : An object is a real world entity, that which possess 3 characterstics 
	known as 
	
		(i) State

		(ii) Behaviour

		(iii) Identity

OOPS Features : 
________________

	(i) Encapsulation : Wrapping up of data and functions into a single unit 		known as Encapsulation. 

	(ii) Abstraction : Hiding the irrelevant details of an object that do not 		contribute to its essential characterstics known as Abstraction.

	*** Encapsulation focuses on showing the relevant details, where abstraction focuses on hiding the irrelevant details ***

	(iii) Inheritance : The concept of deriving a new entity from already existing entity known as inheritance, through inheritance we can reduce the size of the program. 

	 (iv) Polymorphism : The ability to take more than one form known as polymorpshim. 

class : A class is a template or blueprint, that which contains combination of data members and member functions.  Members of the class can be accessable by using instance of the class. 

class class_name {
    data members;
    member functions;
}

Why Java : 
__________

  (i) Platform Independence : Write Once and Run Anywhere. 

  (ii) Console/Windows/Web/Serivce Oriented/Mobile 

 (iii) Packages : Contains group of related classes and interfaces that which belongs to one common group. If you want to overcome the naming conflicts between classess then we need the help of packages. 

Java Architecture : 
____________________

	(i) Java Program : Java Code, that which stored with extension .java 

	(ii) Java Class  : Java code after compilation its converted into bytecode, 				then .class file will be created. 

	(iii) JVM (Java Virtual Machine) 

		It contains various components as 

			(a) Class Loader : Used to load all classes which are required to run the program.  There are 2 types of class loaders known as

			   (i) Primordial Class Loader

			Used to load all system classes which are required to run 				the program. 

			  (ii) Class Loader Objects 	
			
			Used to load all user-defined classes which are required 
				to run the program. 

			(b) JIT Compiler (Just-In Time) : Used to convert bytecode 				into CPU specific format. 

			(c) Execution Manager : Contains QUEUE of programs which are ready to run, where we can execute the program. Before execution it needs to undergone the security authentication. 

	 (iv) Java API : It provides runtime env. that which allows you to work 		with java program. It contains 

		 (a) JDK (Java Development Kit)

		 (b) JRE (Java Runtime Environment) 

Java Features : 
________________

	  (i) Simple

		Java uses simple C/C++ syntaxes, as a programmer no need to take care of internal details like memory management etc... as how much memory allocated to run the program, the same amount of memory will be reallocated automatically. 

	 (ii) Object Oriented

		Java supports all object oriented programming features, as it is 			truly object oriented. 

	(iii) Compiled and Interpreted

		Java Programs are compiled first, during compilation java code will be converted into bytecode, then .class file will be created. In interpretation it reads the bycode line by line and executes. 

	 (iv) Portable : Ability to run the program without changing the source code, java programs are programs, that can run on any env. without changing the source code. 

          (v) Securable : Java implements various levels of security, as 

		(a) Compiler Level Security

		(b) ByteCode Level Security

		(c) Class Loader Level Security 

        (vii) Distributed : By using Java, we can implement all distributed and 				robust applications.

Operators : 
____________

	(i) Arithmetical Operators

		+  -> Addition

		-  -> Subtraction

		*  -> Multiplication
		
		/  -> Division

		%  -> Remainder 

	(ii) Relationals Operators

		> -> Greather Than

		< -> Less than

		>= -> Greater than or equals to 

		<= -> Less than or equals to 

		== -> equals to

		!= -> Not Equals to 

	(iii) Logical Operators

		&& -> And

		|| -> Or
	
		! => NOt 

	 (iv) Assignment Operator

		=  -> Assignment Operator

	(v) Increment/Decrement Operators 


		++

		-- 

	Variables and Constants :

	The value of the variables can be changed from time to time whenever you are executing the program. 

	Naming Conventions : 
	____________________

		-> variable name starts with alphabet or UnderScore(_) symbol

		-> No Spaces or involved

		-> No Special symbols except Underscore (_) 

	Data Types : 
	____________

	There are 2 types of data types as

	   (i) value types : int, float, double, long, boolean etc...

	  (ii) reference types : String, Object and user-defined classes. 

Access Modifiers : 
___________________

(i) private : Allows you to access members within current class. 

(ii) public : Allows you to access members in entire application. 

(iii) protected : Allows you to access members within current/derived classes. 

(iv) friendly : By default java possess friendly access modifier, allows you to access members within all classes of current packages. 

You can define method main() in java, as 

public static void main(String[] args) {
...
...
...
}

You can print any value or message, by using 

System.out.println() statement 

System -> class

out -> Console 

println() -> Method. 

To Compile java program, 

javac file_name.java 

To Execute java program, 

java file_name 

	int i=10;
		int j = ++i;
		System.out.println(i + " " +j);

In above code, the output is 11 11 because

its pre-increment ;

What is the diff. between pre-increment and post-increment

In Pre-Increment it increments first and then assgins the value

In Post-Increment at first it assigns the default value, and
increments. 

*** In Post-Increment the updated value will active 
after next expression(opertor) or next statement) 

To accept custom input from the keyboard, we need the help 
of Scanner class. It is from util package. 

Scanner sc = new Scanner(System.in);

next() => Used to read a word from the keyboard

nextLine() => Used to read entire line of input from keyboard.

nextInt() => Used to read integer.

nextDouble() => Used to read double value

nextBoolean() => Used to read boolean value

How to Define the method, 

You can define a method as

<access_Modifier> <return-type> <method_name>(par(s)) {
    ...
    ...
}

return_type will be int or boolean like any datatype,
if no return value, then add word "void" 

You can create an object to the class, as

class_name obj = new class_name();

You can invoke the method(s) by using 

obj.method_name();

Control Structures : 

Used to define the flow of the program. 

There are 2 types of control structures known as 

(i) Branching 

	if...else : Executes the statement(s) based on the condition. 

		if (condition) {
		    statement(s);
		} else {
		    statement(s);
		}

Tertionary Operator : 

? : known as tertioniary opeator. 

(condition) ? statement1 : statement2;

if condition is true, statement1 executed
if condition is false, then statement2 executed. 

switch...case : Used to define the menu-driven programs. 

switch(expression) {
    case expression1 :
		statement(s);
		break;
    case expression2 : 
		statement(s);
		break;
	...
	...
    default : 
	  statement(s);
	  break;
}


(ii) Looping 

	while loop : This loop executes all the statement(s) repeatedly until the condition remains true, if the condition remains false, then it comes out of the loop. For every loop, basically there are 3 phases as 

	(i) Initialization

	(ii) Condition
	
	(iii) Increment/Decrement 

Initialization performed at the beginning of the loop.

Condition performed at the conditional part of the loop.

Increment/Decrement performed before closing the loop. 

for loop : This loop executes all the statement(s) repeatedly until the condition remains true, if the condition remains false, then it comes out of the loop. 

for(initialization;condition;increment/decrement) {
     statement(s);
}

Array : An array is the finite ordered set of homogeneous elements, means all the elements belongs to same data type. 

All the elements of array are stored in successive memory locations. 

data_type[] variable = new data_type[]{element1, element2....};
int[] a = new int[]{4,2,66,23,11}

a[0]=4;
a[1]=2;
a[2]=66;
a[3]=23;
a[4]=11;


int[] a = new int[] {5,23,22,56,22};
//		for(int i=0;i<a.length;i++) {
//			System.out.println(a[i]);
//		}
		for (int i : a) {
			System.out.println(i);
		}

How internally foreach loop executes :

At first i points to the first element in Array A, after processing first element it checks next element is there or not by using hasMoreElements(). If hasMoreElements() returns true, it moves to the next element by using nextElement().  It repeats as soon as hasMoreElements() returns true. 



 

























