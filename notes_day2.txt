strings : Strings are immutable.  as we cannot change the value by using any string methods. 

public static void main(String[] args) {
   String str="Hello";
   str.concat(" World");
   System.out.println(str);
}


int x;

x=12.5;
x=12;
x="Hello";

Object x;

x=12.5;
x=12;
x="Hello";

Boxing and Unboxing : 

The concept of converting value types to reference types known as boxing, and reference types to value types known as unboxing. 

Object is type, that which can be used for boxing and unboxing. 

What is the default package in java

java.lang

What is the top level class in java 

Object 

this class contains various methods as

	-> hashCode()
	-> getClass()
	-> toString()
	-> equals()

Method Overloading : 

The concept of using the same method w.r.t. different data types or different no.of parameters konwn as method overloading... Here the method name must be same, but no.of parameters or type of parameters we are using here are different. 


class Test {
   int a,b;
   a=5;
   b=7;
}

Constructor : A constructor is a special member, which used to initialize the member variables of the class, it is special because it has the same name as that of class name. 

Rules : 
_______

	-> It will not contains any return type

	-> It will not return any value

	-> It will be invoked automatically once the instance of the class created

	-> A constructor can be overloaded. 

Types of Constructors : 
_________________________

We have 2 types of constructors known as 

(i) static constructors : 

There are called class constructors which are used to initlize the static variables of the class, these constructros are invoked automatically before control reaches the entry point. static constructors cannot be overloaded. *** Java don't have static constructor, as static { } acts as static constructor ***

(ii) instance constructors 

	These are the constructors that which are invoked automatically once the instance of the class created.  These constructors can be overloaded. 

static variables : 

These are the class variables that which retains values irrespective of type of object. 


class Hello {

    public void show(int x) {
	System.out.println("Hi " +x);
    }
    public void show(Object x) {
 	System.out.println("Object " +x);
    }

    public static void main(String[] args) {
	Hello obj = new Hello();
        obj.show(12);
    }
}

Inheritance : The concept of deriving a new class from already existing class known as inheritance, the class which derived known as derived class, the class from which its derived known as base class. 

Through inheritance, we can reduce the size of the program. 

class First {
...
...
...
}

class Second extends First {
...
...
...
}

Once you create an object to Second class, then you can access all public/protected and friendly members of base class. 

Super : 

if you want to pass values from derived class to base class, then we need the help of super keyword. 

It has 2 forms as 

	(i) super as a keyword

	(ii) super as a constructor 

class First {
  public void show() {
     System.out.println("HI");
  }
}

class Second extends First {
  public void show() {
     System.out.println("Bye");
  }
}

class Test {
   public static void main(String[] args) {
       First obj = new Second();
       obj.show();
       Second s1 = new Second();
       First f1 = (First)s1;
       f1.show();
    }
}

____________________________________________________________________

public class First {
    public First() {
	System.out.println("Hi");
    }
}

public class Second extends First {
     Second() {
	System.out.println("Bye");
     }
}

public class Hello {
	public static void main(String[] args) {
	   new Second();
	}
}

_________________________________________________________


class First {
   private First() {
	System.out.println("Hi");
   }
}

class Main {
   public static void main(String[] args) {
	new First();
   }
}

________________________________________________________________

Abstract Class : 

A class, that which can be created, but not implemented and instantiated known as abstract class. Abstract class contains abstract and non-abstract methods, abstract methods needs to be overrided mandetorily by the derived class. 

You cannot create an object to the abstract class. 

abstract class Mobile
{
    void type();
    void name();
}
class Samsung extends Mobile {
...
...
}
class IPhone extends Mobile {
...
...
}

class Factory {
   Mobile showInfo();
}

interface : Java does not support the concept of multiple inheritance, to achieve this we need the help of interfaces. An interface contains method declaration, and the implementation can be done in the corresponding class.  You can add more than one interface to the particular class. 

interface interface_name {
   method(s);
}

interface will be added to the class by using implements Keyword. 

What is the difference between interface and abstract class : 
_______________________________________________________________

	-> An abstract class contains both abstract and non-abstract method(s), where interface contains only abstract method(s).

	-> interface methods are public and abstract by default. 

	-> Multiple Inheritance can be possible by using interfaces

	-> An interface can be called from anywhere to anywhere. 


_____________________________________________________________

interface One {
  void show();
}

interface Two {
  void show();
}

interface Three {
  void show();
}

class Hello implements One, Two, Three {

}

_______________________________________________________________________

class Hello {
    public static void main(String[] args) {
	Hello obj = new Hello();
	System.out.println(obj);
    }
}


class Hello {
    public static void main(String[] args) {
	System.out.println(args[0] + " " + args[2]);
    }
}

Args are : hello hi test 













	
























